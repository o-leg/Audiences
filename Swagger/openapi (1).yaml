openapi: 3.0.1
info:
  title: Лабораторна робота варіант 7
  description: >-
    Створити сервіс для резервування аудиторій на певну дату час та проміжок
    часу від 1 години до 5 днів.
  version: 1.0.0
servers:
  - url: http://127.0.0.0:5000/api/v1
tags:
  - name: audience
    description: audience operations
  - name: reservation
    description: operations with reservations
  - name: user
    description: operations with users
paths:

  /user/register:
    post:
      tags:
        - user
      summary: Register new user
      operationId: registerUser
      parameters:
      - name: name
        in: query
        description: The username
        required: true
        schema:
          type: string
      - name: surname
        in: query
        description: The username
        required: true
        schema:
          type: string
      - name: username
        in: query
        description: The username
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: User's password
        required: true
        schema:
          type: string
      requestBody:
        description: User with data to be registered
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: successful operation. User is registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User with such username already exists
          
          
  /user/login:
    post:
      tags:
      - user
      summary: Log in for existing user
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The username
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: User's password
        required: true
        schema:
          type: string
      responses:
        200:
          description: "successful operation." 
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/InputDataError'
          
  /user/logout:
    post:
      tags:
      - user
      summary: Log out of current user
      operationId: logoutUser
      responses:
        200:
          description: "successful operation"
        401:
          $ref: '#/components/responses/AuthorizationError'
      security:
      - bearerAuth: []
          
  /user/{userId}:
    get:
      tags:
      - user
      summary: Get user by id
      description: Get information about user with provided ID
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        required: true
        description: 'ID of user that you want to get information about.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/AuthorizationError'          
        404:
          description: A user with provided ID was not found.
      security:
      - bearerAuth: []
    put:
      tags:
      - user
      summary: Update information into your account
      description: Updating is available only to existing accounts
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        required: true
        description: 'The user id that needs to be updated.'
        schema:
          type: integer
          format: int64
      requestBody:
        description: 'Updated user object.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description:  "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/AuthorizationError'
        404:
          description: User is not found.
      security:
      - bearerAuth: []        
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        required: true
        description: 'The user id that needs to be deleted.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description:  "successful operation"
        401:
          description: Invalid username supplied
        404:
          description: User is not found.
      security:
      - bearerAuth: []
    
  /audience:
    post:
      tags:
      - audience
      summary: Create new audience
      description: Creating a new audience
      operationId: creatingAudience
      parameters:
      - name: number
        in: query
        description: The number of audience
        required: true
        schema:
          type: integer
          format: int64
      - name: amount_of_places
        in: query
        description: The amount of places
        required: true
        schema:
          type: integer
          format: int64
      - name: status
        in: query
        description: Status
        required: true
        schema:
          type: boolean
      - name: reservuation_date
        in: query
        description: Reservuation date
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Audience'
      responses:
        200:
          description: "successful operation. Audience is created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        401:
          description: Audience with such number already exists  
      security:
      - bearerAuth: []
    get:
      tags:
      - audience
      summary: Get all audiences
      description: Get all audiences
      operationId: getAudiences
      responses:
        200:
          description: "successful operation. Return list of all audiences"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Audience'
        401:
          $ref: '#/components/responses/AuthorizationError'     
      security:
      - bearerAuth: []
      
  /audience/{audienceID}:
    put:
      tags:
      - audience
      summary: Changing information about audience with provided AudienceID
      description: Changing information
      operationId: putAudiences
      parameters:
      - name: audienceID
        in: path
        required: true
        description: 'The audience id that information needs to be retrieved.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Audience'
        401:
          $ref: '#/components/responses/AuthorizationError'     
      security:
      - bearerAuth: []
    get:
      tags:
      - audience
      summary: Get information about audience with provided AudienceID
      description: Get information about audience with provided AudienceID
      operationId: getAudiencebyID
      parameters:
      - name: audienceID
        in: path
        required: true
        description: 'The audience id that you needs information about.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Audience'
        401:
          $ref: '#/components/responses/AuthorizationError'     
      security:
      - bearerAuth: []
    delete:
      tags:
      - audience
      summary: Delete audience with provided AudienceID
      description: Delete audience with provided AudienceID
      operationId: deleteAudiencebyID
      parameters:
      - name: audienceID
        in: path
        required: true
        description: 'The audience id that you want to delete.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Audience'
        401:
          $ref: '#/components/responses/AuthorizationError'     
      security:
      - bearerAuth: []
    
  /reservation:
    get:
      tags:
      - reservation
      summary: Get all reservations
      description: Getting of all existing reservation
      operationId: getReservations
      responses:
        200:
          description: "successful operation. Return list of all reservations"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Reservation'
        401:
          $ref: '#/components/responses/AuthorizationError'          
      security:
      - bearerAuth: []
    post:
      tags:
      - reservation
      summary: Create new Reservation
      description: Creating a new Reservation
      operationId: createReservation
      parameters:
      - name: title
        in: query
        required: true
        description: 'Name of event.'
        schema:
          type: string
      - name: id_of_audience
        in: query
        required: true
        description: 'ID of audience to use.'
        schema:
          type: integer
          format: int64
      - name: date
        in: query
        required: true
        description: 'Date of using.'
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        200:
          description: "successful operation. Reservation is created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        401:
          $ref: '#/components/responses/AuthorizationError'     
      security:
      - bearerAuth: []
      
  /reservation/{reservationId}:
    get:
      tags:
      - reservation
      summary: Get reservation by id
      description: Getting reservation by id
      operationId: getReservationById
      parameters:
      - name: reservationId
        in: path
        required: true
        description: 'The reservation id that needs to retrieved.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        401:
          $ref: '#/components/responses/AuthorizationError'          
        404:
          description: The reservation with provided ID was not found.
      security:
      - bearerAuth: []
    put:
      tags:
      - reservation
      summary: Update reservation
      description: Updating existing reservation owned by current user
      operationId: updateReservation
      parameters:
      - name: reservationId
        in: path
        required: true
        description: 'The reservation id that needs to be updated.'
        schema:
          type: integer
          format: int64
      requestBody:
        description: 'Updated reservation object.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      responses:
        200:
          description:  "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        401:
          $ref: '#/components/responses/AuthorizationError'
        404:
          description: User is not found.
      security:
      - bearerAuth: []  
    delete:
      tags:
      - reservation
      summary: Delete reservation
      description: Deleting existing reservation owned by current user
      operationId: deleteReservation
      parameters:
      - name: reservationId
        in: path
        required: true
        description: 'The reservation id that needs to be updated.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description:  "successful operation. Reservation deleted"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        401:
          $ref: '#/components/responses/AuthorizationError'
        404:
          description: Reservation is not found.
      security:
      - bearerAuth: []  
      
  /reservation/{username}:
     get:
      tags:
      - reservation
      summary: Get reservations for user with provided username
      description: Getting reservations for user with provided username
      operationId: getReservationsByUsername
      parameters:
      - name: username
        in: path
        required: true
        description: 'Login of user that you need information about.'
        schema:
          type: string
      responses:
        200:
          description: "successful operation. Return list of all reservation for user with provided username"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Reservation'
        401:
          $ref: '#/components/responses/AuthorizationError'        
      security:
      - bearerAuth: []
  /reservation/{userID}:
     get:
      tags:
      - reservation
      summary: Get reservations for user with provided userID
      description: Getting reservations for user with provided userID
      operationId: getReservationsByUserID
      parameters:
      - name: userID
        in: path
        required: true
        description: 'ID of user that you need information about.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation. Return list of all reservation for user with provided userID"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Reservation'
        401:
          $ref: '#/components/responses/AuthorizationError'        
      security:
      - bearerAuth: []
      
  
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        surname:
          type: string
        username:
          type: string
        password:
          type: string
          format: password
    Audience:
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
        amount_of_places:
          type: integer
          format: int64
        status:
          type: boolean
    Reservation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        title:
          type: string
        audience_id:
          type: integer
          format: int64
        from_date:
          type: string
          format: date-time
        to_date:
          type: string
          format: date-time
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    AuthorizationError:
      description: Authorization error in the process
    InputDataError:
      description: Input data is not correct