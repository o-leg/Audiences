openapi: 3.0.0
info:
  version: '1'
  title: 'Reserving audiences'
  description: 'service for reserving audiences'
servers:
    - url: https://virtserver.swaggerhub.com/3_heroes/laba5/1
tags:
  - name: audiens
    description: Everything about audiens
  - name: user
    description: User operations
paths: 
  /audiens:
    post:
      tags:
        - audiens
      summary: Add a new audience
      operationId: addAudiens
      responses:
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/audiens'
      security:
        - manager_api_key: []
  /audiens/{id}: 
    get:
      tags:
        - audiens
      summary: Find audiens by id
      description: Returns a single audien
      operationId: getAudiensById
      parameters: 
        - name: id
          in: path
          description: Id of audiens to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Audient'
            application/xml:
              schema:
                $ref: '#/components/schemas/Audient'
        '400':
          description: Invalid ID supplied
        '404':
          description: Audient not found
      security:
        - manager_api_key: []
    put:
      tags:
        - audiens
      summary: Update an existing audiens
      operationId: updateAud
      parameters: 
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Audiens not found
        '405':
          description: Validation exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Audient'
        description: Updated audient object
        required: true
      security:
        - manager_api_key: []
    delete:
      tags:
        - audiens
      summary: Delete audiens
      operationId: deletePet
      parameters:
        - name: id
          in: path
          description: audiens id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Audiens not found
      security:
        - manager_api_key: []
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - user_api_key: []
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
      security:
        - user_api_key: []
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - user_api_key: []
  /requests/{username}:
    post:
      tags:
        - request
      summary: Place an order for a audience
      operationId: placeOrder
      parameters:
        - name: username
          in: path
          description: The name of tenant
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
            application/xml:
              schema:
                $ref: '#/components/schemas/Request'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        description: placed an order for the lease of the audience
        required: true
      security:
        - user_api_key: []
  /requests/{RequestId}:
    get:
      tags: 
      - request
      summary: Find Request by ID
      operationId: getRequestById
      parameters:
        - name: RequestId
          in: path
          description: ID of Request that needs to be founded
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
            application/xml:
              schema:
                $ref: '#/components/schemas/Request'
        '400':
          description: Invalid ID supplied
        '404':
          description: Request not found
      security:
        - user_api_key: []
    put:
      tags:
        - request
      summary: Updated request
      description: This can only be done by the logged in user.
      operationId: updateRequest
      parameters:
        - name: RequestId
          in: path
          description: ID of Request that needs to be founded
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        description: Updated user object
        required: true
      security:
        - user_api_key: []
    delete:
      tags:
        - request
      summary: Delete request
      description: This can only be done by the logged in user.
      operationId: deleteRequest
      parameters:
        - name: RequestId
          in: path
          description: ID of Request that needs to be founded
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid requestId supplied
        '404':
          description: Requsest not found
      security:
        - user_api_key: []
components:
  schemas:
    Request:
      type: object
      required:
        - username
        - AudiensId
        - Lease_start_date
        - Number_of_hours
      properties:
        RequestId:
          type: integer
          format: int64
        username:
          type: string
        AudiensId:
          type: integer
          format: int64
        Lease_start_date:
          type: string
          format: date-time
        Number_of_hours:
          type: integer
          format: int64
          minimum: 1
          maximum: 120 
        status:
          type: string
          description: Order Status
          enum:
            - approved
            - disapproved
            - considered
        complete:
          type: boolean
          default: false
      xml:
        name: Request
    User:
      type: object
      required:
        - username
        - password
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Audient:
      type: object
      required:
        - name
        - address
        - size
        - price
      properties:
        id:
          type: integer
          format: int64
        name: 
          type: string
        address:
          type: string
        size:
          type: integer
          format: int64
        price:
          type: integer
          format: int64
  requestBodies:
    audiens:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Audient'
        application/xml:
          schema:
            $ref: '#/components/schemas/Audient'
      description: add new audiens
      required: true
  securitySchemes:
    manager_api_key:
      type: apiKey
      name: manager_api_key
      in: header
    user_api_key:
      type: apiKey
      name: user_api_key
      in: header
